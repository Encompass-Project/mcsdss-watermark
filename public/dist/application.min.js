"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mcsdss",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("datasets"),ApplicationConfiguration.registerModule("decisions"),ApplicationConfiguration.registerModule("goals"),ApplicationConfiguration.registerModule("models"),ApplicationConfiguration.registerModule("notebooks"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("DashboardSidebarController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.displayName=$scope.authentication.user.displayName,$scope.selectedTemplate={path:"modules/core/views/client.dashboard.view.html"}}]),angular.module("core").controller("DashboardViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.dashboard.view.html"}]),angular.module("core").controller("DatasetsViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.datasets.view.html"}]),angular.module("core").controller("DecisionsViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.decisions.view.html"}]),angular.module("core").controller("DefaultViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.default.view.html"}]),angular.module("core").controller("GoalsViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.goals.view.html"}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.defaultTemplate={path:"modules/core/views/client.default.view.html"},$scope.userTemplate={path:"modules/core/views/client.user.view.html"}}]),angular.module("core").controller("ModelsViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.models.view.html"}]),angular.module("core").controller("NotebooksViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.notebooks.view.html"}]),angular.module("core").controller("PublicationsViewController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.whoami="client.publications.view.html"}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("datasets").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDatasets",{url:"/datasets",templateUrl:"modules/datasets/views/list-datasets.client.view.html"}).state("createDataset",{url:"/datasets/create",templateUrl:"modules/datasets/views/create-dataset.client.view.html"}).state("viewDataset",{url:"/datasets/:datasetId",templateUrl:"modules/datasets/views/view-dataset.client.view.html"}).state("editDataset",{url:"/datasets/:datasetId/edit",templateUrl:"modules/datasets/views/edit-dataset.client.view.html"})}]),angular.module("datasets").controller("DatasetsController",["$scope","$stateParams","$location","Authentication","Datasets",function($scope,$stateParams,$location,Authentication,Datasets){$scope.authentication=Authentication,$scope.create=function(){var dataset=new Datasets({name:this.name});dataset.$save(function(response){$location.path("datasets/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(dataset){if(dataset){dataset.$remove();for(var i in $scope.datasets)$scope.datasets[i]===dataset&&$scope.datasets.splice(i,1)}else $scope.dataset.$remove(function(){$location.path("datasets")})},$scope.update=function(){var dataset=$scope.dataset;dataset.$update(function(){$location.path("datasets/"+dataset._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.datasets=Datasets.query()},$scope.findOne=function(){$scope.dataset=Datasets.get({datasetId:$stateParams.datasetId})}}]),angular.module("datasets").factory("Datasets",["$resource",function($resource){return $resource("datasets/:datasetId",{datasetId:"@_id"},{update:{method:"PUT"}})}]),angular.module("decisions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDecisions",{url:"/decisions",templateUrl:"modules/decisions/views/list-decisions.client.view.html"}).state("createDecision",{url:"/decisions/create",templateUrl:"modules/decisions/views/create-decision.client.view.html"}).state("viewDecision",{url:"/decisions/:decisionId",templateUrl:"modules/decisions/views/view-decision.client.view.html"}).state("editDecision",{url:"/decisions/:decisionId/edit",templateUrl:"modules/decisions/views/edit-decision.client.view.html"})}]),angular.module("decisions").controller("DecisionsController",["$scope","$stateParams","$location","Authentication","Decisions",function($scope,$stateParams,$location,Authentication,Decisions){$scope.authentication=Authentication,$scope.create=function(){var decision=new Decisions({name:this.name});decision.$save(function(response){$location.path("decisions/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(decision){if(decision){decision.$remove();for(var i in $scope.decisions)$scope.decisions[i]===decision&&$scope.decisions.splice(i,1)}else $scope.decision.$remove(function(){$location.path("decisions")})},$scope.update=function(){var decision=$scope.decision;decision.$update(function(){$location.path("decisions/"+decision._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.decisions=Decisions.query()},$scope.findOne=function(){$scope.decision=Decisions.get({decisionId:$stateParams.decisionId})}}]),angular.module("decisions").factory("Decisions",["$resource",function($resource){return $resource("decisions/:decisionId",{decisionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("goals").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGoals",{url:"/goals",templateUrl:"modules/goals/views/list-goals.client.view.html"}).state("createGoal",{url:"/goals/create",templateUrl:"modules/goals/views/create-goal.client.view.html"}).state("viewGoal",{url:"/goals/:goalId",templateUrl:"modules/goals/views/view-goal.client.view.html"}).state("editGoal",{url:"/goals/:goalId/edit",templateUrl:"modules/goals/views/edit-goal.client.view.html"})}]),angular.module("goals").controller("GoalsController",["$scope","$stateParams","$location","Authentication","Goals",function($scope,$stateParams,$location,Authentication,Goals){$scope.authentication=Authentication,$scope.textLimitListView=140,$scope.create=function(){var goal=new Goals({name:this.name,description:this.description,assumptions:this.assumptions,objectives:this.objectives,constraints:this.constraints,measures:this.measures,datasets:this.datasets,models:this.models,notebooks:this.notebooks,publications:this.publications,collaborators:this.collaborators,updated:this.updated});goal.$save(function(response){$location.path("goals/"+response._id),$scope.name="",$scope.description="",$scope.assumptions="",$scope.objectives="",$scope.constraints="",$scope.measures="",$scope.datasets="",$scope.models="",$scope.notebooks="",$scope.publications="",$scope.collaborators=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(goal){if(goal){goal.$remove();for(var i in $scope.goals)$scope.goals[i]===goal&&$scope.goals.splice(i,1)}else $scope.goal.$remove(function(){$location.path("goals")})},$scope.update=function(){var goal=$scope.goal;goal.$update(function(){$location.path("goals/"+goal._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.goals=Goals.query()},$scope.findOne=function(){$scope.goal=Goals.get({goalId:$stateParams.goalId})}}]),angular.module("goals").factory("Goals",["$resource",function($resource){return $resource("goals/:goalId",{goalId:"@_id"},{update:{method:"PUT"}})}]),angular.module("models").config(["$stateProvider",function($stateProvider){$stateProvider.state("listModels",{url:"/models",templateUrl:"modules/models/views/list-models.client.view.html"}).state("createModel",{url:"/models/create",templateUrl:"modules/models/views/create-model.client.view.html"}).state("viewModel",{url:"/models/:modelId",templateUrl:"modules/models/views/view-model.client.view.html"}).state("editModel",{url:"/models/:modelId/edit",templateUrl:"modules/models/views/edit-model.client.view.html"})}]),angular.module("models").controller("ModelsController",["$scope","$stateParams","$location","Authentication","Models",function($scope,$stateParams,$location,Authentication,Models){$scope.authentication=Authentication,$scope.create=function(){var model=new Models({name:this.name});model.$save(function(response){$location.path("models/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(model){if(model){model.$remove();for(var i in $scope.models)$scope.models[i]===model&&$scope.models.splice(i,1)}else $scope.model.$remove(function(){$location.path("models")})},$scope.update=function(){var model=$scope.model;model.$update(function(){$location.path("models/"+model._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.models=Models.query()},$scope.findOne=function(){$scope.model=Models.get({modelId:$stateParams.modelId})}}]),angular.module("models").factory("Models",["$resource",function($resource){return $resource("models/:modelId",{modelId:"@_id"},{update:{method:"PUT"}})}]),angular.module("notebooks").config(["$stateProvider",function($stateProvider){$stateProvider.state("listNotebooks",{url:"/notebooks",templateUrl:"modules/notebooks/views/list-notebooks.client.view.html"}).state("createNotebook",{url:"/notebooks/create",templateUrl:"modules/notebooks/views/create-notebook.client.view.html"}).state("viewNotebook",{url:"/notebooks/:notebookId",templateUrl:"modules/notebooks/views/view-notebook.client.view.html"}).state("editNotebook",{url:"/notebooks/:notebookId/edit",templateUrl:"modules/notebooks/views/edit-notebook.client.view.html"})}]),angular.module("notebooks").controller("NotebooksController",["$scope","$stateParams","$location","Authentication","Notebooks",function($scope,$stateParams,$location,Authentication,Notebooks){$scope.authentication=Authentication,$scope.create=function(){var notebook=new Notebooks({name:this.name});notebook.$save(function(response){$location.path("notebooks/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(notebook){if(notebook){notebook.$remove();for(var i in $scope.notebooks)$scope.notebooks[i]===notebook&&$scope.notebooks.splice(i,1)}else $scope.notebook.$remove(function(){$location.path("notebooks")})},$scope.update=function(){var notebook=$scope.notebook;notebook.$update(function(){$location.path("notebooks/"+notebook._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.notebooks=Notebooks.query()},$scope.findOne=function(){$scope.notebook=Notebooks.get({notebookId:$stateParams.notebookId})}}]),angular.module("notebooks").factory("Notebooks",["$resource",function($resource){return $resource("notebooks/:notebookId",{notebookId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);